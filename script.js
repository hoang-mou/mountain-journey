// =============================================================
// üéÆ MOUNTAIN JOURNEY 3D ‚Äì b·∫£n c√≥ m√¥ h√¨nh th·∫≠t
// =============================================================

// ====== 1. SCENE 3D C∆† B·∫¢N ======
const canvas = document.getElementById('scene');
const scene = new THREE.Scene();

// üé• Camera
const camera = new THREE.PerspectiveCamera(
  75,
  window.innerWidth / window.innerHeight,
  0.1,
  1000
);
camera.position.set(0, 2, 8);

// üí° √Ånh s√°ng
const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
scene.add(ambientLight);

const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
directionalLight.position.set(5, 10, 7);
scene.add(directionalLight);

// üåÑ M·∫∑t ƒë·∫•t / n·ªÅn
const groundGeometry = new THREE.PlaneGeometry(50, 50);
const groundMaterial = new THREE.MeshStandardMaterial({ color: 0x99c1b9 });
const ground = new THREE.Mesh(groundGeometry, groundMaterial);
ground.rotation.x = -Math.PI / 2;
ground.position.y = -4;
scene.add(ground);

// üèî N√∫i h√¨nh ch√≥p
const mountainGeometry = new THREE.ConeGeometry(5, 8, 6);
const mountainMaterial = new THREE.MeshStandardMaterial({ color: 0x8b6b4b });
const mountain = new THREE.Mesh(mountainGeometry, mountainMaterial);
mountain.position.y = 0;
scene.add(mountain);

// ====== 2. NH√ÇN V·∫¨T 3D (.glb th·∫≠t) ======
let character;
const loader = new THREE.GLTFLoader();

loader.load(
  'https://raw.githubusercontent.com/hoang-mou/mountain-journey/main/assets/character.glb',
  (gltf) => {
    character = gltf.scene;
    character.scale.set(0.8, 0.8, 0.8);
    character.position.set(0, -3.5, 0);
    scene.add(character);
  },
  (xhr) => {
    console.log(`ƒêang t·∫£i m√¥ h√¨nh: ${(xhr.loaded / xhr.total * 100).toFixed(0)}%`);
  },
  (error) => {
    console.error('L·ªói t·∫£i m√¥ h√¨nh:', error);
  }
);

// üé® Renderer
const renderer = new THREE.WebGLRenderer({ canvas, antialias: true });
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.setPixelRatio(window.devicePixelRatio);
renderer.setClearColor(0xaeecef, 1); // m√†u b·∫ßu tr·ªùi

// üå´ Hi·ªáu ·ª©ng s∆∞∆°ng
scene.fog = new THREE.Fog(0xaeecef, 5, 25);

// üîÑ V√≤ng l·∫∑p animation
function animate() {
  requestAnimationFrame(animate);
  mountain.rotation.y += 0.003;
  renderer.render(scene, camera);
}
animate();

// üìè Responsive
window.addEventListener('resize', () => {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});


// =============================================================
// üß© 3. PH·∫¶N GIAO DI·ªÜN: QU·∫¢N L√ù M·ª§C TI√äU & TI·∫æN ƒê·ªò
// =============================================================

// üóÇÔ∏è DOM Elements
const form = document.getElementById('goalForm');
const input = document.getElementById('goalInput');
const list = document.getElementById('goalList');
const progressFill = document.getElementById('progressFill');
const progressText = document.getElementById('progressText');
const quoteEl = document.getElementById('quote');

// üì¶ L∆∞u d·ªØ li·ªáu trong localStorage
let goals = JSON.parse(localStorage.getItem('goals')) || [];

// üí¨ C√¢u n√≥i ƒë·ªông vi√™n ng·∫´u nhi√™n
const quotes = [
  "Kh√¥ng c·∫ßn nhanh, ch·ªâ c·∫ßn ki√™n tr√¨ l√† ƒë·ªß. üå±",
  "M·ªôt b∆∞·ªõc nh·ªè h√¥m nay l√† m·ªôt chi·∫øn th·∫Øng. üèî",
  "Ti·∫øp t·ª•c ti·∫øn l√™n, d√π ch·ªâ 1%. üí™",
  "B·∫°n ƒëang l√†m r·∫•t t·ªët, ƒë·ª´ng d·ª´ng l·∫°i nh√©! üåü",
  "M·ªói h√†nh tr√¨nh vƒ© ƒë·∫°i ƒë·ªÅu b·∫Øt ƒë·∫ßu b·∫±ng m·ªôt b∆∞·ªõc nh·ªè."
];
quoteEl.textContent = quotes[Math.floor(Math.random() * quotes.length)];


// ====== HI·ªÇN TH·ªä DANH S√ÅCH ======
function renderGoals() {
  list.innerHTML = '';

  goals.forEach((goal, index) => {
    const li = document.createElement('li');
    li.innerHTML = `
      <span style="text-decoration: ${goal.done ? 'line-through' : 'none'}">
        ${goal.text}
      </span>
      <button onclick="toggleGoal(${index})">${goal.done ? '‚Ü©Ô∏è' : '‚úÖ'}</button>
    `;
    list.appendChild(li);
  });

  updateProgress();
}


// ====== TH√äM M·ª§C TI√äU ======
form.addEventListener('submit', (e) => {
  e.preventDefault();
  const text = input.value.trim();
  if (!text) return;

  goals.push({ text, done: false });
  input.value = '';
  localStorage.setItem('goals', JSON.stringify(goals));
  renderGoals();
});


// ====== ƒê√ÅNH D·∫§U HO√ÄN TH√ÄNH / H·ª¶Y ======
function toggleGoal(index) {
  goals[index].done = !goals[index].done;
  localStorage.setItem('goals', JSON.stringify(goals));
  renderGoals();
}


// ====== C·∫¨P NH·∫¨T TI·∫æN ƒê·ªò + ANIMATION ======
function updateProgress() {
  const total = goals.length;
  const done = goals.filter(g => g.done).length;
  const percent = total === 0 ? 0 : Math.round((done / total) * 100);

  progressFill.style.width = `${percent}%`;
  progressText.textContent = `${percent}% ho√†n th√†nh`;

  moveCharacterByProgress(percent);
}


// ====== ANIMATION NH√ÇN V·∫¨T LEO N√öI ======
function moveCharacterByProgress(percent) {
  if (!character) return; // ƒê·ª£i model load xong

  const baseY = -3.5;
  const climbHeight = 6;
  const newY = baseY + (percent / 100) * climbHeight;

  gsap.to(character.position, {
    y: newY,
    duration: 1,
    ease: "power2.out"
  });
}


// ====== KH·ªûI T·∫†O ======
renderGoals();
